****VERSION 1****
import { useState } from "react";
import skillsData from "./data/skills.json";

function App() {
  // State for "learn" skill selection
  const [selectedCategoryLearn, setSelectedCategoryLearn] = useState("");
  const [selectedSubcategoryLearn, setSelectedSubcategoryLearn] = useState("");
  const [skillToLearn, setSkillToLearn] = useState("");

  // State for "teach" skill selection
  const [selectedCategoryTeach, setSelectedCategoryTeach] = useState("");
  const [selectedSubcategoryTeach, setSelectedSubcategoryTeach] = useState("");
  const [skillToTeach, setSkillToTeach] = useState("");

  const [matches, setMatches] = useState([]);

  // Get unique categories from skillsData
  const categories = [...new Set(skillsData.map((s) => s.category))].sort();

  // Subcategories filtered by selected category for learn and teach
  const subcategoriesLearn = selectedCategoryLearn
    ? [...new Set(skillsData.filter((s) => s.category === selectedCategoryLearn).map((s) => s.subcategory))].sort()
    : [];

  const subcategoriesTeach = selectedCategoryTeach
    ? [...new Set(skillsData.filter((s) => s.category === selectedCategoryTeach).map((s) => s.subcategory))].sort()
    : [];

  // Skills filtered by selected category & subcategory for learn and teach
  const skillsLearn = selectedCategoryLearn && selectedSubcategoryLearn
    ? skillsData
        .filter((s) => s.category === selectedCategoryLearn && s.subcategory === selectedSubcategoryLearn)
        .sort((a, b) => a.name.localeCompare(b.name))
    : [];

  const skillsTeach = selectedCategoryTeach && selectedSubcategoryTeach
    ? skillsData
        .filter((s) => s.category === selectedCategoryTeach && s.subcategory === selectedSubcategoryTeach)
        .sort((a, b) => a.name.localeCompare(b.name))
    : [];

  const findMatches = () => {
    if (!skillToLearn || !skillToTeach) {
      alert("Please select both skills to learn and teach!");
      return;
    }
    // Dummy matches for demo
    setMatches([
      { id: 1, name: "Alice", teaches: skillToTeach, learns: skillToLearn },
      { id: 2, name: "Bob", teaches: skillToTeach, learns: skillToLearn },
    ]);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-700 text-white flex flex-col items-center p-8">
      <header className="mb-12 text-center max-w-3xl">
        <h1 className="text-5xl font-extrabold mb-4 drop-shadow-lg">SkillSwap</h1>
        <p className="text-lg font-light drop-shadow-md">
          Connect, teach, and learn new skills by matching with people like you.
        </p>
      </header>

      <main className="w-full max-w-xl bg-white bg-opacity-10 rounded-3xl p-8 shadow-xl backdrop-blur-md">
        {/* Learn Skill Selectors */}
        <div className="mb-6">
          <label className="block mb-2 font-semibold text-white" htmlFor="categoryLearn">
            Category you want to learn:
          </label>
          <select
            id="categoryLearn"
            value={selectedCategoryLearn}
            onChange={(e) => {
              setSelectedCategoryLearn(e.target.value);
              setSelectedSubcategoryLearn("");
              setSkillToLearn("");
            }}
            className="w-full rounded-lg p-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400 mb-3"
          >
            <option value="">Select Category</option>
            {categories.map((cat) => (
              <option key={cat} value={cat}>{cat}</option>
            ))}
          </select>

          {selectedCategoryLearn && (
            <>
              <label className="block mb-2 font-semibold text-white" htmlFor="subcategoryLearn">
                Subcategory:
              </label>
              <select
                id="subcategoryLearn"
                value={selectedSubcategoryLearn}
                onChange={(e) => {
                  setSelectedSubcategoryLearn(e.target.value);
                  setSkillToLearn("");
                }}
                className="w-full rounded-lg p-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400 mb-3"
              >
                <option value="">Select Subcategory</option>
                {subcategoriesLearn.map((subcat) => (
                  <option key={subcat} value={subcat}>{subcat}</option>
                ))}
              </select>
            </>
          )}

          {selectedSubcategoryLearn && (
            <>
              <label className="block mb-2 font-semibold text-white" htmlFor="skillToLearn">
                Skill you want to learn:
              </label>
              <select
                id="skillToLearn"
                value={skillToLearn}
                onChange={(e) => setSkillToLearn(e.target.value)}
                className="w-full rounded-lg p-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
              >
                <option value="">Select Skill</option>
                {skillsLearn.map(({ id, name }) => (
                  <option key={id} value={name}>{name}</option>
                ))}
              </select>
            </>
          )}
        </div>

        {/* Teach Skill Selectors */}
        <div className="mb-6">
          <label className="block mb-2 font-semibold text-white" htmlFor="categoryTeach">
            Category you can teach:
          </label>
          <select
            id="categoryTeach"
            value={selectedCategoryTeach}
            onChange={(e) => {
              setSelectedCategoryTeach(e.target.value);
              setSelectedSubcategoryTeach("");
              setSkillToTeach("");
            }}
            className="w-full rounded-lg p-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400 mb-3"
          >
            <option value="">Select Category</option>
            {categories.map((cat) => (
              <option key={cat} value={cat}>{cat}</option>
            ))}
          </select>

          {selectedCategoryTeach && (
            <>
              <label className="block mb-2 font-semibold text-white" htmlFor="subcategoryTeach">
                Subcategory:
              </label>
              <select
                id="subcategoryTeach"
                value={selectedSubcategoryTeach}
                onChange={(e) => {
                  setSelectedSubcategoryTeach(e.target.value);
                  setSkillToTeach("");
                }}
                className="w-full rounded-lg p-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400 mb-3"
              >
                <option value="">Select Subcategory</option>
                {subcategoriesTeach.map((subcat) => (
                  <option key={subcat} value={subcat}>{subcat}</option>
                ))}
              </select>
            </>
          )}

          {selectedSubcategoryTeach && (
            <>
              <label className="block mb-2 font-semibold text-white" htmlFor="skillToTeach">
                Skill you can teach:
              </label>
              <select
                id="skillToTeach"
                value={skillToTeach}
                onChange={(e) => setSkillToTeach(e.target.value)}
                className="w-full rounded-lg p-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
              >
                <option value="">Select Skill</option>
                {skillsTeach.map(({ id, name }) => (
                  <option key={id} value={name}>{name}</option>
                ))}
              </select>
            </>
          )}
        </div>

        <button
          onClick={findMatches}
          className="w-full py-3 bg-purple-600 rounded-full font-semibold hover:bg-purple-700 transition"
        >
          Find Matches
        </button>

        {/* Matches list */}
        <section className="mt-8">
          {matches.length > 0 ? (
            <>
              <h2 className="text-xl font-semibold mb-4">Your Matches</h2>
              <ul className="space-y-4">
                {matches.map(({ id, name, teaches, learns }) => (
                  <li
                    key={id}
                    className="bg-purple-800 bg-opacity-70 rounded-xl p-4 shadow-md hover:bg-purple-700 transition"
                  >
                    <p>
                      <strong>{name}</strong> teaches <em>{teaches}</em> and wants to learn <em>{learns}</em>.
                    </p>
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <p className="italic text-purple-300 mt-6">Select skills and click "Find Matches" to see results.</p>
          )}
        </section>
      </main>

      <footer className="mt-auto text-purple-300 text-sm mt-12 mb-6">
        Â© 2025 SkillSwap â€” Made with ðŸ’œ
      </footer>
    </div>
  );
}

export default App;


****VERSION 1****


****VERSION 2****

import { useState } from "react";
import Select from "react-select";
import skillsData from "./data/skills.json";

function App() {
  // Convert skills JSON into react-select options with labels showing category > subcategory > name
  const skillOptions = skillsData.map(({ id, category, subcategory, name }) => ({
    value: name,
    label: `${category} > ${subcategory} > ${name}`,
    id,
  }));

  const [skillsToLearn, setSkillsToLearn] = useState([]);
  const [skillsToTeach, setSkillsToTeach] = useState([]);
  const [matches, setMatches] = useState([]);

  const findMatches = () => {
    if (skillsToLearn.length === 0 || skillsToTeach.length === 0) {
      alert("Please select at least one skill to learn and teach!");
      return;
    }

    setMatches([
      {
        id: 1,
        name: "Alice",
        teaches: skillsToTeach.map((s) => s.value).join(", "),
        learns: skillsToLearn.map((s) => s.value).join(", "),
      },
      {
        id: 2,
        name: "Bob",
        teaches: skillsToTeach.map((s) => s.value).join(", "),
        learns: skillsToLearn.map((s) => s.value).join(", "),
      },
    ]);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-700 text-white flex flex-col items-center p-8">
      <header className="mb-12 text-center max-w-3xl">
        <h1 className="text-5xl font-extrabold mb-4 drop-shadow-lg">SkillSwap</h1>
        <p className="text-lg font-light drop-shadow-md">
          Connect, teach, and learn new skills by matching with people like you.
        </p>
      </header>

      <main className="w-full max-w-xl bg-white bg-opacity-10 rounded-3xl p-8 shadow-xl backdrop-blur-md">
        {/* Skills to Learn */}
        <div className="mb-6">
          <label className="block mb-2 font-semibold text-white" htmlFor="skillsToLearn">
            Skills you want to learn:
          </label>
          <Select
            id="skillsToLearn"
            options={skillOptions}
            value={skillsToLearn}
            onChange={setSkillsToLearn}
            isMulti
            className="text-gray-900"
            classNamePrefix="select"
            placeholder="Select one or more skills..."
          />
        </div>

        {/* Skills to Teach */}
        <div className="mb-6">
          <label className="block mb-2 font-semibold text-white" htmlFor="skillsToTeach">
            Skills you can teach:
          </label>
          <Select
            id="skillsToTeach"
            options={skillOptions}
            value={skillsToTeach}
            onChange={setSkillsToTeach}
            isMulti
            className="text-gray-900"
            classNamePrefix="select"
            placeholder="Select one or more skills..."
          />
        </div>

        <button
          onClick={findMatches}
          className="w-full py-3 bg-purple-600 rounded-full font-semibold hover:bg-purple-700 transition"
        >
          Find Matches
        </button>

        {/* Matches list */}
        <section className="mt-8">
          {matches.length > 0 ? (
            <>
              <h2 className="text-xl font-semibold mb-4">Your Matches</h2>
              <ul className="space-y-4">
                {matches.map(({ id, name, teaches, learns }) => (
                  <li
                    key={id}
                    className="bg-purple-800 bg-opacity-70 rounded-xl p-4 shadow-md hover:bg-purple-700 transition"
                  >
                    <p>
                      <strong>{name}</strong> teaches <em>{teaches}</em> and wants to learn <em>{learns}</em>.
                    </p>
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <p className="italic text-purple-300 mt-6">Select skills and click "Find Matches" to see results.</p>
          )}
        </section>
      </main>

      <footer className="mt-auto text-purple-300 text-sm mt-12 mb-6">
        Â© 2025 SkillSwap â€” Made with ðŸ’œ
      </footer>
    </div>
  );
}

export default App;

****VERSION 2****


****VERSION 3****
import { useState } from "react";
import skillsData from "./data/skills.json";

function App() {
  // --- Learn section state ---
  const [categoryFilterLearn, setCategoryFilterLearn] = useState("");
  const [subcategoryFilterLearn, setSubcategoryFilterLearn] = useState("");
  const [tempSelectedLearn, setTempSelectedLearn] = useState([]);
  const [skillsToLearn, setSkillsToLearn] = useState([]);
  const [searchLearn, setSearchLearn] = useState("");

  // --- Teach section state ---
  const [categoryFilterTeach, setCategoryFilterTeach] = useState("");
  const [subcategoryFilterTeach, setSubcategoryFilterTeach] = useState("");
  const [tempSelectedTeach, setTempSelectedTeach] = useState([]);
  const [skillsToTeach, setSkillsToTeach] = useState([]);
  const [searchTeach, setSearchTeach] = useState("");

  const [matches, setMatches] = useState([]);

  // Categories list
  const categories = [...new Set(skillsData.map((s) => s.category))].sort();

  // Subcategories for Learn and Teach filters
  const subcategoriesLearn = categoryFilterLearn
    ? [...new Set(skillsData.filter((s) => s.category === categoryFilterLearn).map((s) => s.subcategory))].sort()
    : [];
  const subcategoriesTeach = categoryFilterTeach
    ? [...new Set(skillsData.filter((s) => s.category === categoryFilterTeach).map((s) => s.subcategory))].sort()
    : [];

  // Filter skills for Learn multi-select based on filters (category/subcategory)
  const getFilteredSkillsLearn = () => {
    return skillsData
      .filter((s) => (categoryFilterLearn ? s.category === categoryFilterLearn : true))
      .filter((s) => (subcategoryFilterLearn ? s.subcategory === subcategoryFilterLearn : true))
      .sort((a, b) => a.name.localeCompare(b.name));
  };

  // Filter skills for Teach multi-select based on filters (category/subcategory)
  const getFilteredSkillsTeach = () => {
    return skillsData
      .filter((s) => (categoryFilterTeach ? s.category === categoryFilterTeach : true))
      .filter((s) => (subcategoryFilterTeach ? s.subcategory === subcategoryFilterTeach : true))
      .sort((a, b) => a.name.localeCompare(b.name));
  };

  // Search helper function: returns array of skill objects matching the search text in any of category/subcategory/skill name
  const getSearchResults = (searchText) => {
    const lower = searchText.toLowerCase();
    if (!lower.trim()) return [];
    return skillsData.filter(
      (s) =>
        s.category.toLowerCase().includes(lower) ||
        s.subcategory.toLowerCase().includes(lower) ||
        s.name.toLowerCase().includes(lower)
    ).slice(0, 20); // limit to 20 results for performance
  };

  // --- Handlers for Learn filters ---
  const handleCategoryChangeLearn = (cat) => {
    setCategoryFilterLearn(cat);
    setSubcategoryFilterLearn("");
    setTempSelectedLearn([]);
  };
  const handleSubcategoryChangeLearn = (subcat) => {
    setSubcategoryFilterLearn(subcat);
    setTempSelectedLearn([]);
  };

  // --- Handlers for Teach filters ---
  const handleCategoryChangeTeach = (cat) => {
    setCategoryFilterTeach(cat);
    setSubcategoryFilterTeach("");
    setTempSelectedTeach([]);
  };
  const handleSubcategoryChangeTeach = (subcat) => {
    setSubcategoryFilterTeach(subcat);
    setTempSelectedTeach([]);
  };

  // Add from multi-select temp to master selected list (Learn)
  const addSelectedLearn = () => {
    setSkillsToLearn((prev) => {
      const combined = [...prev];
      tempSelectedLearn.forEach((skillName) => {
        if (!combined.includes(skillName)) combined.push(skillName);
      });
      return combined;
    });
    setTempSelectedLearn([]);
  };

  // Add from multi-select temp to master selected list (Teach)
  const addSelectedTeach = () => {
    setSkillsToTeach((prev) => {
      const combined = [...prev];
      tempSelectedTeach.forEach((skillName) => {
        if (!combined.includes(skillName)) combined.push(skillName);
      });
      return combined;
    });
    setTempSelectedTeach([]);
  };

  // Remove skill from master list (Learn)
  const removeSkillLearn = (skillName) => {
    setSkillsToLearn((prev) => prev.filter((s) => s !== skillName));
  };

  // Remove skill from master list (Teach)
  const removeSkillTeach = (skillName) => {
    setSkillsToTeach((prev) => prev.filter((s) => s !== skillName));
  };

  // Add skill from search result to Learn master list
  const addSkillFromSearchLearn = (skillName) => {
    setSkillsToLearn((prev) => (prev.includes(skillName) ? prev : [...prev, skillName]));
    setSearchLearn("");
  };

  // Add skill from search result to Teach master list
  const addSkillFromSearchTeach = (skillName) => {
    setSkillsToTeach((prev) => (prev.includes(skillName) ? prev : [...prev, skillName]));
    setSearchTeach("");
  };

  // Dummy find matches function
  const findMatches = () => {
    if (skillsToLearn.length === 0 || skillsToTeach.length === 0) {
      alert("Please add at least one skill to learn and teach!");
      return;
    }

    setMatches([
      {
        id: 1,
        name: "Alice",
        teaches: skillsToTeach.join(", "),
        learns: skillsToLearn.join(", "),
      },
      {
        id: 2,
        name: "Bob",
        teaches: skillsToTeach.join(", "),
        learns: skillsToLearn.join(", "),
      },
    ]);
  };

  // Get search results arrays
  const searchResultsLearn = getSearchResults(searchLearn);
  const searchResultsTeach = getSearchResults(searchTeach);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-700 text-white flex flex-col items-center p-8">
      <header className="mb-12 text-center max-w-3xl">
        <h1 className="text-5xl font-extrabold mb-4 drop-shadow-lg">SkillSwap</h1>
        <p className="text-lg font-light drop-shadow-md">
          Connect, teach, and learn new skills by matching with people like you.
        </p>
      </header>

      <main className="w-full max-w-xl bg-white bg-opacity-10 rounded-3xl p-8 shadow-xl backdrop-blur-md overflow-auto">
        {/* Learn Section */}
        <section className="mb-10">
          <h2 className="text-2xl font-semibold mb-2">Skills You Want to Learn</h2>

          {/* Filters */}
          <div className="flex gap-4 mb-4">
            <select
              className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
              value={categoryFilterLearn}
              onChange={(e) => handleCategoryChangeLearn(e.target.value)}
            >
              <option value="">All Categories</option>
              {categories.map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>

            <select
              className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
              value={subcategoryFilterLearn}
              onChange={(e) => handleSubcategoryChangeLearn(e.target.value)}
              disabled={!categoryFilterLearn}
            >
              <option value="">All Subcategories</option>
              {subcategoriesLearn.map((subcat) => (
                <option key={subcat} value={subcat}>
                  {subcat}
                </option>
              ))}
            </select>
          </div>

          {/* Skills multi-select */}
          <select
            multiple
            className="w-full rounded-lg p-3 text-gray-900 font-medium h-32 mb-3"
            value={tempSelectedLearn}
            onChange={(e) => {
              const selectedOptions = Array.from(e.target.selectedOptions, (opt) => opt.value);
              setTempSelectedLearn(selectedOptions);
            }}
            size={8}
          >
            {getFilteredSkillsLearn().map(({ id, name }) => (
              <option key={id} value={name}>
                {name}
              </option>
            ))}
          </select>

          <button
            onClick={addSelectedLearn}
            className="bg-purple-600 hover:bg-purple-700 px-5 py-2 rounded-full font-semibold mb-2"
            disabled={tempSelectedLearn.length === 0}
          >
            Add Selected Learn Skills
          </button>

          {/* OR search below */}
          <p className="italic mb-2 text-purple-300">OR search a category, subcategory, or skill:</p>
          <input
            type="text"
            placeholder="Search here..."
            value={searchLearn}
            onChange={(e) => setSearchLearn(e.target.value)}
            className="w-full rounded-lg p-2 mb-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
            autoComplete="off"
          />
          {searchLearn && searchResultsLearn.length > 0 && (
            <ul className="max-h-48 overflow-auto bg-purple-900 bg-opacity-80 rounded-lg mb-4 shadow-inner">
              {searchResultsLearn.map(({ id, category, subcategory, name }) => (
                <li
                  key={id}
                  onClick={() => addSkillFromSearchLearn(name)}
                  className="cursor-pointer px-3 py-2 hover:bg-purple-700 transition"
                  title={`Add ${name}`}
                >
                  <strong>{category}</strong> &gt; <em>{subcategory}</em> &gt; {name}
                </li>
              ))}
            </ul>
          )}

          {/* Selected skills list */}
          <div className="flex flex-wrap gap-2">
            {skillsToLearn.map((skill) => (
              <div
                key={skill}
                className="bg-purple-800 bg-opacity-70 rounded-full px-4 py-1 flex items-center gap-2"
              >
                <span>{skill}</span>
                <button
                  onClick={() => removeSkillLearn(skill)}
                  className="text-purple-300 hover:text-white font-bold"
                  aria-label={`Remove ${skill}`}
                >
                  Ã—
                </button>
              </div>
            ))}
          </div>
        </section>

        {/* Teach Section */}
        <section>
          <h2 className="text-2xl font-semibold mb-2">Skills You Can Teach</h2>

          {/* Filters */}
          <div className="flex gap-4 mb-4">
            <select
              className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
              value={categoryFilterTeach}
              onChange={(e) => handleCategoryChangeTeach(e.target.value)}
            >
              <option value="">All Categories</option>
              {categories.map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>

            <select
              className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
              value={subcategoryFilterTeach}
              onChange={(e) => handleSubcategoryChangeTeach(e.target.value)}
              disabled={!categoryFilterTeach}
            >
              <option value="">All Subcategories</option>
              {subcategoriesTeach.map((subcat) => (
                <option key={subcat} value={subcat}>
                  {subcat}
                </option>
              ))}
            </select>
          </div>

          {/* Skills multi-select */}
          <select
            multiple
            className="w-full rounded-lg p-3 text-gray-900 font-medium h-32 mb-3"
            value={tempSelectedTeach}
            onChange={(e) => {
              const selectedOptions = Array.from(e.target.selectedOptions, (opt) => opt.value);
              setTempSelectedTeach(selectedOptions);
            }}
            size={8}
          >
            {getFilteredSkillsTeach().map(({ id, name }) => (
              <option key={id} value={name}>
                {name}
              </option>
            ))}
          </select>

          <button
            onClick={addSelectedTeach}
            className="bg-purple-600 hover:bg-purple-700 px-5 py-2 rounded-full font-semibold mb-2"
            disabled={tempSelectedTeach.length === 0}
          >
            Add Selected Teach Skills
          </button>

          {/* OR search below */}
          <p className="italic mb-2 text-purple-300">OR search a category, subcategory, or skill:</p>
          <input
            type="text"
            placeholder="Search here..."
            value={searchTeach}
            onChange={(e) => setSearchTeach(e.target.value)}
            className="w-full rounded-lg p-2 mb-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
            autoComplete="off"
          />
          {searchTeach && searchResultsTeach.length > 0 && (
            <ul className="max-h-48 overflow-auto bg-purple-900 bg-opacity-80 rounded-lg mb-4 shadow-inner">
              {searchResultsTeach.map(({ id, category, subcategory, name }) => (
                <li
                  key={id}
                  onClick={() => addSkillFromSearchTeach(name)}
                  className="cursor-pointer px-3 py-2 hover:bg-purple-700 transition"
                  title={`Add ${name}`}
                >
                  <strong>{category}</strong> &gt; <em>{subcategory}</em> &gt; {name}
                </li>
              ))}
            </ul>
          )}

          {/* Selected skills list */}
          <div className="flex flex-wrap gap-2">
            {skillsToTeach.map((skill) => (
              <div
                key={skill}
                className="bg-purple-800 bg-opacity-70 rounded-full px-4 py-1 flex items-center gap-2"
              >
                <span>{skill}</span>
                <button
                  onClick={() => removeSkillTeach(skill)}
                  className="text-purple-300 hover:text-white font-bold"
                  aria-label={`Remove ${skill}`}
                >
                  Ã—
                </button>
              </div>
            ))}
          </div>
        </section>

        {/* Find Matches Button */}
        <button
          onClick={findMatches}
          className="w-full py-3 bg-purple-600 rounded-full font-semibold hover:bg-purple-700 transition mt-10"
        >
          Find Matches
        </button>

        {/* Matches list */}
        <section className="mt-8">
          {matches.length > 0 ? (
            <>
              <h2 className="text-xl font-semibold mb-4">Your Matches</h2>
              <ul className="space-y-4">
                {matches.map(({ id, name, teaches, learns }) => (
                  <li
                    key={id}
                    className="bg-purple-800 bg-opacity-70 rounded-xl p-4 shadow-md hover:bg-purple-700 transition"
                  >
                    <p>
                      <strong>{name}</strong> teaches <em>{teaches}</em> and wants to learn <em>{learns}</em>.
                    </p>
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <p className="italic text-purple-300 mt-6">Add skills and click "Find Matches" to see results.</p>
          )}
        </section>
      </main>

      <footer className="mt-auto text-purple-300 text-sm mt-12 mb-6">
        Â© 2025 SkillSwap â€” Made with ðŸ’œ
      </footer>
    </div>
  );
}

export default App;
****VERSION 3****

****VERSION 4****
import { useState } from "react";
import skillsData from "./data/skills.json";
import aliasMap from "./data/alias-map.json";


function App() {
  // --- Learn section state ---
  const [categoryFilterLearn, setCategoryFilterLearn] = useState("");
  const [subcategoryFilterLearn, setSubcategoryFilterLearn] = useState("");
  const [tempSelectedLearn, setTempSelectedLearn] = useState([]);
  const [skillsToLearn, setSkillsToLearn] = useState([]);
  const [searchLearn, setSearchLearn] = useState("");

  // --- Teach section state ---
  const [categoryFilterTeach, setCategoryFilterTeach] = useState("");
  const [subcategoryFilterTeach, setSubcategoryFilterTeach] = useState("");
  const [tempSelectedTeach, setTempSelectedTeach] = useState([]);
  const [skillsToTeach, setSkillsToTeach] = useState([]);
  const [searchTeach, setSearchTeach] = useState("");

  const [matches, setMatches] = useState([]);

  // Categories list
  const categories = [...new Set(skillsData.map((s) => s.category))].sort();

  // Subcategories for Learn and Teach filters
  const subcategoriesLearn = categoryFilterLearn
    ? [...new Set(skillsData.filter((s) => s.category === categoryFilterLearn).map((s) => s.subcategory))].sort()
    : [];
  const subcategoriesTeach = categoryFilterTeach
    ? [...new Set(skillsData.filter((s) => s.category === categoryFilterTeach).map((s) => s.subcategory))].sort()
    : [];

  // Filter skills for Learn multi-select based on filters (category/subcategory)
  const getFilteredSkillsLearn = () => {
    return skillsData
      .filter((s) => (categoryFilterLearn ? s.category === categoryFilterLearn : true))
      .filter((s) => (subcategoryFilterLearn ? s.subcategory === subcategoryFilterLearn : true))
      .sort((a, b) => a.name.localeCompare(b.name));
  };

  // Filter skills for Teach multi-select based on filters (category/subcategory)
  const getFilteredSkillsTeach = () => {
    return skillsData
      .filter((s) => (categoryFilterTeach ? s.category === categoryFilterTeach : true))
      .filter((s) => (subcategoryFilterTeach ? s.subcategory === subcategoryFilterTeach : true))
      .sort((a, b) => a.name.localeCompare(b.name));
  };

  // Search helper function: returns array of skill objects matching the search text in any of category/subcategory/skill name
// Normalize function: lowercase + replace dashes/underscores/commas with spaces + trim extra spaces
// Normalize strings: lowercase, replace special chars with spaces, collapse spaces, trim
const normalize = (str) =>
  str
    .toLowerCase()
    .replace(/[-_.,]/g, " ")   // replace special chars with spaces
    .replace(/\s+/g, " ")      // collapse multiple spaces to single space
    .trim();

// Pre-normalize the aliasMap keys and values for faster lookups
const normalizedAliasMap = {};
for (const key in aliasMap) {
  const normalizedKey = normalize(key);
  normalizedAliasMap[normalizedKey] = aliasMap[key].map(normalize);
}

// Given a token, get that token plus all its aliases (if any)
const getAliasesForToken = (token) => {
  if (normalizedAliasMap[token]) {
    return [token, ...normalizedAliasMap[token]];
  }
  return [token];
};

const getSearchResults = (searchText) => {
  const normalizedSearch = normalize(searchText);
  if (!normalizedSearch) return [];

  // Split normalized search into tokens
  const searchTokens = normalizedSearch.split(" ");

  // Expand each token with aliases from the alias map
  const expandedTokens = searchTokens.flatMap(getAliasesForToken);

  // Filter skills where any expanded token matches category, subcategory, or name
  return skillsData.filter((s) => {
    const cat = normalize(s.category);
    const subcat = normalize(s.subcategory);
    const name = normalize(s.name);

    return expandedTokens.some(
      (token) => cat.includes(token) || subcat.includes(token) || name.includes(token)
    );
  }).slice(0, 20);  // limit to top 20 results
};


  // --- Handlers for Learn filters ---
  const handleCategoryChangeLearn = (cat) => {
    setCategoryFilterLearn(cat);
    setSubcategoryFilterLearn("");
    setTempSelectedLearn([]);
  };
  const handleSubcategoryChangeLearn = (subcat) => {
    setSubcategoryFilterLearn(subcat);
    setTempSelectedLearn([]);
  };

  // --- Handlers for Teach filters ---
  const handleCategoryChangeTeach = (cat) => {
    setCategoryFilterTeach(cat);
    setSubcategoryFilterTeach("");
    setTempSelectedTeach([]);
  };
  const handleSubcategoryChangeTeach = (subcat) => {
    setSubcategoryFilterTeach(subcat);
    setTempSelectedTeach([]);
  };

  // Add from multi-select temp to master selected list (Learn)
  const addSelectedLearn = () => {
    setSkillsToLearn((prev) => {
      const combined = [...prev];
      tempSelectedLearn.forEach((skillName) => {
        if (!combined.includes(skillName)) combined.push(skillName);
      });
      return combined;
    });
    setTempSelectedLearn([]);
  };

  // Add from multi-select temp to master selected list (Teach)
  const addSelectedTeach = () => {
    setSkillsToTeach((prev) => {
      const combined = [...prev];
      tempSelectedTeach.forEach((skillName) => {
        if (!combined.includes(skillName)) combined.push(skillName);
      });
      return combined;
    });
    setTempSelectedTeach([]);
  };

  // Remove skill from master list (Learn)
  const removeSkillLearn = (skillName) => {
    setSkillsToLearn((prev) => prev.filter((s) => s !== skillName));
  };

  // Remove skill from master list (Teach)
  const removeSkillTeach = (skillName) => {
    setSkillsToTeach((prev) => prev.filter((s) => s !== skillName));
  };

  // Add skill from search result to Learn master list
  const addSkillFromSearchLearn = (skillName) => {
    setSkillsToLearn((prev) => (prev.includes(skillName) ? prev : [...prev, skillName]));
    setSearchLearn("");
  };

  // Add skill from search result to Teach master list
  const addSkillFromSearchTeach = (skillName) => {
    setSkillsToTeach((prev) => (prev.includes(skillName) ? prev : [...prev, skillName]));
    setSearchTeach("");
  };

  // Dummy find matches function
  const findMatches = () => {
    if (skillsToLearn.length === 0 || skillsToTeach.length === 0) {
      alert("Please add at least one skill to learn and teach!");
      return;
    }

    setMatches([
      {
        id: 1,
        name: "Alice",
        teaches: skillsToTeach.join(", "),
        learns: skillsToLearn.join(", "),
      },
      {
        id: 2,
        name: "Bob",
        teaches: skillsToTeach.join(", "),
        learns: skillsToLearn.join(", "),
      },
    ]);
  };

  // Get search results arrays
  const searchResultsLearn = getSearchResults(searchLearn);
  const searchResultsTeach = getSearchResults(searchTeach);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-700 text-white flex flex-col items-center p-8">
      <header className="mb-12 text-center max-w-3xl">
        <h1 className="text-5xl font-extrabold mb-4 drop-shadow-lg">SkillSwap</h1>
        <p className="text-lg font-light drop-shadow-md">
          Connect, teach, and learn new skills by matching with people like you.
        </p>
      </header>

      <main className="w-full max-w-xl bg-white bg-opacity-10 rounded-3xl p-8 shadow-xl backdrop-blur-md overflow-auto">
        {/* Learn Section */}
        <section className="mb-10">
          <h2 className="text-2xl font-semibold mb-2">Skills You Want to Learn</h2>

          {/* Filters */}
          <div className="flex gap-4 mb-4">
            <select
              className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
              value={categoryFilterLearn}
              onChange={(e) => handleCategoryChangeLearn(e.target.value)}
            >
              <option value="">All Categories</option>
              {categories.map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>

            <select
              className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
              value={subcategoryFilterLearn}
              onChange={(e) => handleSubcategoryChangeLearn(e.target.value)}
              disabled={!categoryFilterLearn}
            >
              <option value="">All Subcategories</option>
              {subcategoriesLearn.map((subcat) => (
                <option key={subcat} value={subcat}>
                  {subcat}
                </option>
              ))}
            </select>
          </div>

          {/* Skills multi-select */}
          <select
            multiple
            className="w-full rounded-lg p-3 text-gray-900 font-medium h-32 mb-3"
            value={tempSelectedLearn}
            onChange={(e) => {
              const selectedOptions = Array.from(e.target.selectedOptions, (opt) => opt.value);
              setTempSelectedLearn(selectedOptions);
            }}
            size={8}
          >
            {getFilteredSkillsLearn().map(({ id, name }) => (
              <option key={id} value={name}>
                {name}
              </option>
            ))}
          </select>

          <button
            onClick={addSelectedLearn}
            className="bg-purple-600 hover:bg-purple-700 px-5 py-2 rounded-full font-semibold mb-2"
            disabled={tempSelectedLearn.length === 0}
          >
            Add Selected Learn Skills
          </button>

          {/* OR search below */}
          <p className="italic mb-2 text-purple-300">OR search a category, subcategory, or skill:</p>
          <input
            type="text"
            placeholder="Search here..."
            value={searchLearn}
            onChange={(e) => setSearchLearn(e.target.value)}
            className="w-full rounded-lg p-2 mb-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
            autoComplete="off"
          />
          {searchLearn && searchResultsLearn.length > 0 && (
            <ul className="max-h-48 overflow-auto bg-purple-900 bg-opacity-80 rounded-lg mb-4 shadow-inner">
              {searchResultsLearn.map(({ id, category, subcategory, name }) => (
                <li
                  key={id}
                  onClick={() => addSkillFromSearchLearn(name)}
                  className="cursor-pointer px-3 py-2 hover:bg-purple-700 transition"
                  title={`Add ${name}`}
                >
                  <strong>{category}</strong> &gt; <em>{subcategory}</em> &gt; {name}
                </li>
              ))}
            </ul>
          )}

          {/* Selected skills list */}
          <div className="flex flex-wrap gap-2">
            {skillsToLearn.map((skill) => (
              <div
                key={skill}
                className="bg-purple-800 bg-opacity-70 rounded-full px-4 py-1 flex items-center gap-2"
              >
                <span>{skill}</span>
                <button
                  onClick={() => removeSkillLearn(skill)}
                  className="text-purple-300 hover:text-white font-bold"
                  aria-label={`Remove ${skill}`}
                >
                  Ã—
                </button>
              </div>
            ))}
          </div>
        </section>

        {/* Teach Section */}
        <section>
          <h2 className="text-2xl font-semibold mb-2">Skills You Can Teach</h2>

          {/* Filters */}
          <div className="flex gap-4 mb-4">
            <select
              className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
              value={categoryFilterTeach}
              onChange={(e) => handleCategoryChangeTeach(e.target.value)}
            >
              <option value="">All Categories</option>
              {categories.map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>

            <select
              className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
              value={subcategoryFilterTeach}
              onChange={(e) => handleSubcategoryChangeTeach(e.target.value)}
              disabled={!categoryFilterTeach}
            >
              <option value="">All Subcategories</option>
              {subcategoriesTeach.map((subcat) => (
                <option key={subcat} value={subcat}>
                  {subcat}
                </option>
              ))}
            </select>
          </div>

          {/* Skills multi-select */}
          <select
            multiple
            className="w-full rounded-lg p-3 text-gray-900 font-medium h-32 mb-3"
            value={tempSelectedTeach}
            onChange={(e) => {
              const selectedOptions = Array.from(e.target.selectedOptions, (opt) => opt.value);
              setTempSelectedTeach(selectedOptions);
            }}
            size={8}
          >
            {getFilteredSkillsTeach().map(({ id, name }) => (
              <option key={id} value={name}>
                {name}
              </option>
            ))}
          </select>

          <button
            onClick={addSelectedTeach}
            className="bg-purple-600 hover:bg-purple-700 px-5 py-2 rounded-full font-semibold mb-2"
            disabled={tempSelectedTeach.length === 0}
          >
            Add Selected Teach Skills
          </button>

          {/* OR search below */}
          <p className="italic mb-2 text-purple-300">OR search a category, subcategory, or skill:</p>
          <input
            type="text"
            placeholder="Search here..."
            value={searchTeach}
            onChange={(e) => setSearchTeach(e.target.value)}
            className="w-full rounded-lg p-2 mb-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
            autoComplete="off"
          />
          {searchTeach && searchResultsTeach.length > 0 && (
            <ul className="max-h-48 overflow-auto bg-purple-900 bg-opacity-80 rounded-lg mb-4 shadow-inner">
              {searchResultsTeach.map(({ id, category, subcategory, name }) => (
                <li
                  key={id}
                  onClick={() => addSkillFromSearchTeach(name)}
                  className="cursor-pointer px-3 py-2 hover:bg-purple-700 transition"
                  title={`Add ${name}`}
                >
                  <strong>{category}</strong> &gt; <em>{subcategory}</em> &gt; {name}
                </li>
              ))}
            </ul>
          )}

          {/* Selected skills list */}
          <div className="flex flex-wrap gap-2">
            {skillsToTeach.map((skill) => (
              <div
                key={skill}
                className="bg-purple-800 bg-opacity-70 rounded-full px-4 py-1 flex items-center gap-2"
              >
                <span>{skill}</span>
                <button
                  onClick={() => removeSkillTeach(skill)}
                  className="text-purple-300 hover:text-white font-bold"
                  aria-label={`Remove ${skill}`}
                >
                  Ã—
                </button>
              </div>
            ))}
          </div>
        </section>

        {/* Find Matches Button */}
        <button
          onClick={findMatches}
          className="w-full py-3 bg-purple-600 rounded-full font-semibold hover:bg-purple-700 transition mt-10"
        >
          Find Matches
        </button>

        {/* Matches list */}
        <section className="mt-8">
          {matches.length > 0 ? (
            <>
              <h2 className="text-xl font-semibold mb-4">Your Matches</h2>
              <ul className="space-y-4">
                {matches.map(({ id, name, teaches, learns }) => (
                  <li
                    key={id}
                    className="bg-purple-800 bg-opacity-70 rounded-xl p-4 shadow-md hover:bg-purple-700 transition"
                  >
                    <p>
                      <strong>{name}</strong> teaches <em>{teaches}</em> and wants to learn <em>{learns}</em>.
                    </p>
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <p className="italic text-purple-300 mt-6">Add skills and click "Find Matches" to see results.</p>
          )}
        </section>
      </main>

      <footer className="mt-auto text-purple-300 text-sm mt-12 mb-6">
        Â© 2025 SkillSwap â€” Made with ðŸ’œ
      </footer>
    </div>
  );
}

export default App;
****VERSION 4****

****VERSION 5 Aug 15****
import React, { useEffect, useState } from "react";
import aliasMap from "./data/alias-map.json";
import SkillSelector from './SkillSelector';
import { addUserSkill, getMatches } from './auth';
import api from "./api";

function App() {
  // --- Backend data states ---
  const [allSkills, setAllSkills] = useState([]);
  const [loadingSkills, setLoadingSkills] = useState(true);
  const [skillsError, setSkillsError] = useState(null);

  // --- Learn section state ---
  const [categoryFilterLearn, setCategoryFilterLearn] = useState("");
  const [subcategoryFilterLearn, setSubcategoryFilterLearn] = useState("");
  const [tempSelectedLearn, setTempSelectedLearn] = useState([]);
  const [skillsToLearn, setSkillsToLearn] = useState([]);
  const [searchLearn, setSearchLearn] = useState("");

  // --- Teach section state ---
  const [categoryFilterTeach, setCategoryFilterTeach] = useState("");
  const [subcategoryFilterTeach, setSubcategoryFilterTeach] = useState("");
  const [tempSelectedTeach, setTempSelectedTeach] = useState([]);
  const [skillsToTeach, setSkillsToTeach] = useState([]);
  const [searchTeach, setSearchTeach] = useState("");

  const [matches, setMatches] = useState([]);

  // Fetch skills from backend API once on mount
  useEffect(() => {
    setLoadingSkills(true);
    fetch("http://localhost:8000/api/skills/")
      .then((res) => {
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      })
      .then((data) => {
        setAllSkills(data);
        setLoadingSkills(false);
      })
      .catch((err) => {
        setSkillsError(err.message);
        setLoadingSkills(false);
      });
  }, []);

  // Categories list from live data
  const categories = [...new Set(allSkills.map((s) => s.category).filter(Boolean))].sort();

  // Subcategories for Learn and Teach filters from live data
  const subcategoriesLearn = categoryFilterLearn
    ? [...new Set(allSkills.filter((s) => s.category === categoryFilterLearn).map((s) => s.subcategory).filter(Boolean))].sort()
    : [];
  const subcategoriesTeach = categoryFilterTeach
    ? [...new Set(allSkills.filter((s) => s.category === categoryFilterTeach).map((s) => s.subcategory).filter(Boolean))].sort()
    : [];

  // Filter skills for Learn multi-select based on filters (category/subcategory)
  const getFilteredSkillsLearn = () => {
    return allSkills
      .filter((s) => (categoryFilterLearn ? s.category === categoryFilterLearn : true))
      .filter((s) => (subcategoryFilterLearn ? s.subcategory === subcategoryFilterLearn : true))
      .sort((a, b) => a.name.localeCompare(b.name));
  };

  // Filter skills for Teach multi-select based on filters (category/subcategory)
  const getFilteredSkillsTeach = () => {
    return allSkills
      .filter((s) => (categoryFilterTeach ? s.category === categoryFilterTeach : true))
      .filter((s) => (subcategoryFilterTeach ? s.subcategory === subcategoryFilterTeach : true))
      .sort((a, b) => a.name.localeCompare(b.name));
  };

  // Normalize string helper (lowercase, strip special chars, trim)
  const normalize = (str = "") =>
    str
      .toLowerCase()
      .replace(/[-_.,]/g, " ")
      .replace(/\s+/g, " ")
      .trim();

  // Normalize alias map for quick lookup
  const normalizedAliasMap = {};
  for (const key in aliasMap) {
    normalizedAliasMap[normalize(key)] = aliasMap[key].map(normalize);
  }

  // Expand a token with aliases
  const getAliasesForToken = (token) => {
    return normalizedAliasMap[token] ? [token, ...normalizedAliasMap[token]] : [token];
  };

  // Search skills by expanded alias tokens across category, subcategory, name
  const getSearchResults = (searchText) => {
    const normalizedSearch = normalize(searchText);
    if (!normalizedSearch) return [];

    const searchTokens = normalizedSearch.split(" ");
    const expandedTokens = searchTokens.flatMap(getAliasesForToken);

    return allSkills.filter((s) => {
      const cat = normalize(s.category);
      const subcat = normalize(s.subcategory);
      const name = normalize(s.name);
      return expandedTokens.some((token) => cat.includes(token) || subcat.includes(token) || name.includes(token));
    }).slice(0, 20);
  };

  // Learn filter handlers
  const handleCategoryChangeLearn = (cat) => {
    setCategoryFilterLearn(cat);
    setSubcategoryFilterLearn("");
    setTempSelectedLearn([]);
  };
  const handleSubcategoryChangeLearn = (subcat) => {
    setSubcategoryFilterLearn(subcat);
    setTempSelectedLearn([]);
  };

  // Teach filter handlers
  const handleCategoryChangeTeach = (cat) => {
    setCategoryFilterTeach(cat);
    setSubcategoryFilterTeach("");
    setTempSelectedTeach([]);
  };
  const handleSubcategoryChangeTeach = (subcat) => {
    setSubcategoryFilterTeach(subcat);
    setTempSelectedTeach([]);
  };

  // Add selected skills from temp multi-select to master lists
  const addSelectedLearn = () => {
    setSkillsToLearn((prev) => {
      const combined = [...prev];
      tempSelectedLearn.forEach((skillName) => {
        if (!combined.includes(skillName)) combined.push(skillName);
      });
      return combined;
    });
    setTempSelectedLearn([]);
  };
  const addSelectedTeach = () => {
    setSkillsToTeach((prev) => {
      const combined = [...prev];
      tempSelectedTeach.forEach((skillName) => {
        if (!combined.includes(skillName)) combined.push(skillName);
      });
      return combined;
    });
    setTempSelectedTeach([]);
  };

  // Remove skill from master lists
  const removeSkillLearn = (skillName) => {
    setSkillsToLearn((prev) => prev.filter((s) => s !== skillName));
  };
  const removeSkillTeach = (skillName) => {
    setSkillsToTeach((prev) => prev.filter((s) => s !== skillName));
  };

  // Add skill from search results to master lists
  const addSkillFromSearchLearn = (skillName) => {
    setSkillsToLearn((prev) => (prev.includes(skillName) ? prev : [...prev, skillName]));
    setSearchLearn("");
  };
  const addSkillFromSearchTeach = (skillName) => {
    setSkillsToTeach((prev) => (prev.includes(skillName) ? prev : [...prev, skillName]));
    setSearchTeach("");
  };

  // Dummy find matches (to replace later with API)
  const findMatches = () => {
    if (skillsToLearn.length === 0 || skillsToTeach.length === 0) {
      alert("Please add at least one skill to learn and teach!");
      return;
    }
    setMatches([
      {
        id: 1,
        name: "Alice",
        teaches: skillsToTeach.join(", "),
        learns: skillsToLearn.join(", "),
      },
      {
        id: 2,
        name: "Bob",
        teaches: skillsToTeach.join(", "),
        learns: skillsToLearn.join(", "),
      },
    ]);
  };

  // Search results for Learn and Teach
  const searchResultsLearn = getSearchResults(searchLearn);
  const searchResultsTeach = getSearchResults(searchTeach);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-700 text-white flex flex-col items-center p-8">
      <header className="mb-12 text-center max-w-3xl">
        <h1 className="text-5xl font-extrabold mb-4 drop-shadow-lg">SkillSwap</h1>
        <p className="text-lg font-light drop-shadow-md">
          Connect, teach, and learn new skills by matching with people like you.
        </p>
      </header>

      <main className="w-full max-w-xl bg-white bg-opacity-10 rounded-3xl p-8 shadow-xl backdrop-blur-md overflow-auto">
        {loadingSkills ? (
          <p className="text-center text-purple-200">Loading skills...</p>
        ) : skillsError ? (
          <p className="text-center text-red-300">Error loading skills: {skillsError}</p>
        ) : (
          <>
            {/* Learn Section */}
            <section className="mb-10">
              <h2 className="text-2xl font-semibold mb-2">Skills You Want to Learn</h2>
              <div className="flex gap-4 mb-4">
                <select
                  className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
                  value={categoryFilterLearn}
                  onChange={(e) => handleCategoryChangeLearn(e.target.value)}
                >
                  <option value="">All Categories</option>
                  {categories.map((cat) => (
                    <option key={cat} value={cat}>
                      {cat}
                    </option>
                  ))}
                </select>
                <select
                  className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
                  value={subcategoryFilterLearn}
                  onChange={(e) => handleSubcategoryChangeLearn(e.target.value)}
                  disabled={!categoryFilterLearn}
                >
                  <option value="">All Subcategories</option>
                  {subcategoriesLearn.map((subcat) => (
                    <option key={subcat} value={subcat}>
                      {subcat}
                    </option>
                  ))}
                </select>
              </div>

              <select
                multiple
                className="w-full rounded-lg p-3 text-gray-900 font-medium h-32 mb-3"
                value={tempSelectedLearn}
                onChange={(e) =>
                  setTempSelectedLearn(Array.from(e.target.selectedOptions, (opt) => opt.value))
                }
                size={8}
              >
                {getFilteredSkillsLearn().map(({ id, name }) => (
                  <option key={id} value={name}>
                    {name}
                  </option>
                ))}
              </select>

              <button
                onClick={addSelectedLearn}
                disabled={tempSelectedLearn.length === 0}
                className="bg-purple-600 hover:bg-purple-700 px-5 py-2 rounded-full font-semibold mb-2"
              >
                Add Selected Learn Skills
              </button>

              <p className="italic mb-2 text-purple-300">OR search a category, subcategory, or skill:</p>
              <input
                type="text"
                placeholder="Search here..."
                value={searchLearn}
                onChange={(e) => setSearchLearn(e.target.value)}
                className="w-full rounded-lg p-2 mb-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
                autoComplete="off"
              />
              {searchLearn && searchResultsLearn.length > 0 && (
                <ul className="max-h-48 overflow-auto bg-purple-900 bg-opacity-80 rounded-lg mb-4 shadow-inner">
                  {searchResultsLearn.map(({ id, category, subcategory, name }) => (
                    <li
                      key={id}
                      onClick={() => addSkillFromSearchLearn(name)}
                      className="cursor-pointer px-3 py-2 hover:bg-purple-700 transition"
                      title={`Add ${name}`}
                    >
                      <strong>{category}</strong> &gt; <em>{subcategory}</em> &gt; {name}
                    </li>
                  ))}
                </ul>
              )}

              <div className="flex flex-wrap gap-2">
                {skillsToLearn.map((skill) => (
                  <div
                    key={skill}
                    className="bg-purple-800 bg-opacity-70 rounded-full px-4 py-1 flex items-center gap-2"
                  >
                    <span>{skill}</span>
                    <button
                      onClick={() => removeSkillLearn(skill)}
                      className="text-purple-300 hover:text-white font-bold"
                      aria-label={`Remove ${skill}`}
                    >
                      Ã—
                    </button>
                  </div>
                ))}
              </div>
            </section>

            {/* Teach Section */}
            <section>
              <h2 className="text-2xl font-semibold mb-2">Skills You Can Teach</h2>
              <div className="flex gap-4 mb-4">
                <select
                  className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
                  value={categoryFilterTeach}
                  onChange={(e) => handleCategoryChangeTeach(e.target.value)}
                >
                  <option value="">All Categories</option>
                  {categories.map((cat) => (
                    <option key={cat} value={cat}>
                      {cat}
                    </option>
                  ))}
                </select>
                <select
                  className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
                  value={subcategoryFilterTeach}
                  onChange={(e) => handleSubcategoryChangeTeach(e.target.value)}
                  disabled={!categoryFilterTeach}
                >
                  <option value="">All Subcategories</option>
                  {subcategoriesTeach.map((subcat) => (
                    <option key={subcat} value={subcat}>
                      {subcat}
                    </option>
                  ))}
                </select>
              </div>

              <select
                multiple
                className="w-full rounded-lg p-3 text-gray-900 font-medium h-32 mb-3"
                value={tempSelectedTeach}
                onChange={(e) =>
                  setTempSelectedTeach(Array.from(e.target.selectedOptions, (opt) => opt.value))
                }
                size={8}
              >
                {getFilteredSkillsTeach().map(({ id, name }) => (
                  <option key={id} value={name}>
                    {name}
                  </option>
                ))}
              </select>

              <button
                onClick={addSelectedTeach}
                disabled={tempSelectedTeach.length === 0}
                className="bg-purple-600 hover:bg-purple-700 px-5 py-2 rounded-full font-semibold mb-2"
              >
                Add Selected Teach Skills
              </button>

              <p className="italic mb-2 text-purple-300">OR search a category, subcategory, or skill:</p>
              <input
                type="text"
                placeholder="Search here..."
                value={searchTeach}
                onChange={(e) => setSearchTeach(e.target.value)}
                className="w-full rounded-lg p-2 mb-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
                autoComplete="off"
              />
              {searchTeach && searchResultsTeach.length > 0 && (
                <ul className="max-h-48 overflow-auto bg-purple-900 bg-opacity-80 rounded-lg mb-4 shadow-inner">
                  {searchResultsTeach.map(({ id, category, subcategory, name }) => (
                    <li
                      key={id}
                      onClick={() => addSkillFromSearchTeach(name)}
                      className="cursor-pointer px-3 py-2 hover:bg-purple-700 transition"
                      title={`Add ${name}`}
                    >
                      <strong>{category}</strong> &gt; <em>{subcategory}</em> &gt; {name}
                    </li>
                  ))}
                </ul>
              )}

              <div className="flex flex-wrap gap-2">
                {skillsToTeach.map((skill) => (
                  <div
                    key={skill}
                    className="bg-purple-800 bg-opacity-70 rounded-full px-4 py-1 flex items-center gap-2"
                  >
                    <span>{skill}</span>
                    <button
                      onClick={() => removeSkillTeach(skill)}
                      className="text-purple-300 hover:text-white font-bold"
                      aria-label={`Remove ${skill}`}
                    >
                      Ã—
                    </button>
                  </div>
                ))}
              </div>
            </section>

            {/* Find Matches Button */}
            <button
              onClick={findMatches}
              className="w-full py-3 bg-purple-600 rounded-full font-semibold hover:bg-purple-700 transition mt-10"
            >
              Find Matches
            </button>

            {/* Matches list */}
            <section className="mt-8">
              {matches.length > 0 ? (
                <>
                  <h2 className="text-xl font-semibold mb-4">Your Matches</h2>
                  <ul className="space-y-4">
                    {matches.map(({ id, name, teaches, learns }) => (
                      <li
                        key={id}
                        className="bg-purple-800 bg-opacity-70 rounded-xl p-4 shadow-md hover:bg-purple-700 transition"
                      >
                        <p>
                          <strong>{name}</strong> teaches <em>{teaches}</em> and wants to learn <em>{learns}</em>.
                        </p>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <p className="italic text-purple-300 mt-6">Add skills and click "Find Matches" to see results.</p>
              )}
            </section>
          </>
        )}
      </main>

      <footer className="mt-auto text-purple-300 text-sm mt-12 mb-6">
        Â© 2025 SkillSwap â€” Made with ðŸ’œ
      </footer>
    </div>
  );
}

export default App;
****VERSION 5****

****VERSION 6****
// src/App.js
import React, { useEffect, useState } from "react";
import aliasMap from "./data/alias-map.json";
import api from "./api";
import { addUserSkill, getMatches } from "./auth";
import { Routes, Route, Navigate, useNavigate } from "react-router-dom";
import SkillSwap from "./SkillSwap"; // move all your existing App.js content (SkillSwap UI) into SkillSwap.js
import Login from "./Login";
/*
  Local SkillSelector component (keeps App.js self-contained).
  Props:
   - title
   - skills, category, subcategory
   - onCategoryChange, onSubcategoryChange
   - subcategories
   - tempSelected, setTempSelected, addSelected
   - searchValue, setSearchValue, searchResults, addFromSearch
   - selectedSkills, removeSelectedSkill (array of names)
*/
function SkillSelector({
  title,
  skills,
  category,
  subcategory,
  onCategoryChange,
  onSubcategoryChange,
  subcategories,
  tempSelected,
  setTempSelected,
  addSelected,
  searchValue,
  setSearchValue,
  searchResults,
  addFromSearch,
  selectedSkills,
  removeSelectedSkill,
}) {
  return (
    <section className="mb-10">
      <h2 className="text-2xl font-semibold mb-2">{title}</h2>

      {/* Filters */}
      <div className="flex gap-4 mb-4">
        <select
          className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
          value={category || ""}
          onChange={(e) => onCategoryChange(e.target.value)}
        >
          <option value="">All Categories</option>
          {[...new Set(skills.map((s) => s.category).filter(Boolean))]
            .sort()
            .map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
        </select>

        <select
          className="flex-1 rounded-lg p-2 text-gray-900 font-medium"
          value={subcategory || ""}
          onChange={(e) => onSubcategoryChange(e.target.value)}
          disabled={!category}
        >
          <option value="">All Subcategories</option>
          {subcategories.map((subcat) => (
            <option key={subcat} value={subcat}>
              {subcat}
            </option>
          ))}
        </select>
      </div>

      {/* Multi-select */}
      <select
        multiple
        className="w-full rounded-lg p-3 text-gray-900 font-medium h-32 mb-3"
        value={tempSelected}
        onChange={(e) => setTempSelected(Array.from(e.target.selectedOptions, (opt) => opt.value))}
        size={8}
      >
        {skills
          .filter((s) => (!category || s.category === category))
          .filter((s) => (!subcategory || s.subcategory === subcategory))
          .sort((a, b) => (a.name || "").localeCompare(b.name || ""))
          .map(({ id, name }) => (
            <option key={id} value={name}>
              {name}
            </option>
          ))}
      </select>

      <div className="flex items-center gap-3 mb-3">
        <button
          onClick={addSelected}
          disabled={tempSelected.length === 0}
          className="bg-purple-600 hover:bg-purple-700 px-5 py-2 rounded-full font-semibold"
        >
          Add Selected
        </button>
        <p className="italic text-purple-300 text-sm">OR search a category, subcategory, or skill:</p>
      </div>

      {/* Search */}
      <input
        type="text"
        placeholder="Search here..."
        value={searchValue}
        onChange={(e) => setSearchValue(e.target.value)}
        className="w-full rounded-lg p-2 mb-3 text-gray-900 font-medium focus:outline-none focus:ring-2 focus:ring-purple-400"
        autoComplete="off"
      />
      {searchValue && searchResults.length > 0 && (
        <ul className="max-h-48 overflow-auto bg-purple-900 bg-opacity-80 rounded-lg mb-4 shadow-inner">
          {searchResults.map(({ id, category, subcategory, name }) => (
            <li
              key={id}
              onClick={() => addFromSearch(name)}
              className="cursor-pointer px-3 py-2 hover:bg-purple-700 transition"
              title={`Add ${name}`}
            >
              <strong>{category}</strong> &gt; <em>{subcategory}</em> &gt; {name}
            </li>
          ))}
        </ul>
      )}

      {/* Selected skill chips */}
      <div className="flex flex-wrap gap-2">
        {selectedSkills.map((skill) => (
          <div
            key={skill}
            className="bg-purple-800 bg-opacity-70 rounded-full px-4 py-1 flex items-center gap-2"
          >
            <span>{skill}</span>
            <button
              onClick={() => removeSelectedSkill(skill)}
              className="text-purple-300 hover:text-white font-bold"
              aria-label={`Remove ${skill}`}
            >
              Ã—
            </button>
          </div>
        ))}
      </div>
    </section>
  );
}

function App() {
  // --- Backend data states ---
  const [allSkills, setAllSkills] = useState([]);
  const [loadingSkills, setLoadingSkills] = useState(true);
  const [skillsError, setSkillsError] = useState(null);

  // --- Learn section state ---
  const [categoryFilterLearn, setCategoryFilterLearn] = useState("");
  const [subcategoryFilterLearn, setSubcategoryFilterLearn] = useState("");
  const [tempSelectedLearn, setTempSelectedLearn] = useState([]);
  const [skillsToLearn, setSkillsToLearn] = useState([]);
  const [searchLearn, setSearchLearn] = useState("");

  // --- Teach section state ---
  const [categoryFilterTeach, setCategoryFilterTeach] = useState("");
  const [subcategoryFilterTeach, setSubcategoryFilterTeach] = useState("");
  const [tempSelectedTeach, setTempSelectedTeach] = useState([]);
  const [skillsToTeach, setSkillsToTeach] = useState([]);
  const [searchTeach, setSearchTeach] = useState("");

  // userSkills are the backend UserSkill rows for the logged-in user:
  // objects: { id: <userSkillId>, skillId: <skillId>, skillName: <string>, type: 'learn'|'teach' }
  const [userSkills, setUserSkills] = useState([]);

  const [matches, setMatches] = useState([]);
  const [currentUserId, setCurrentUserId] = useState(null);

  // --- Utility helpers ---
  const normalize = (str = "") =>
    str
      .toString()
      .toLowerCase()
      .replace(/[-_.,]/g, " ")
      .replace(/\s+/g, " ")
      .trim();

  // Normalize alias map
  const normalizedAliasMap = {};
  for (const key in aliasMap) {
    normalizedAliasMap[normalize(key)] = aliasMap[key].map(normalize);
  }
  const getAliasesForToken = (token) => (normalizedAliasMap[token] ? [token, ...normalizedAliasMap[token]] : [token]);

  // helper: decode user id from JWT (if available)
  const getUserIdFromToken = () => {
    try {
      const token = localStorage.getItem("access_token");
      if (!token) return null;
      const payload = token.split(".")[1];
      // Some tokens use base64url; replace chars
      const base64 = payload.replace(/-/g, "+").replace(/_/g, "/");
      const json = JSON.parse(window.atob(base64));
      // Standard token payloads vary â€” try common keys
      return json.user_id || json.user || json.userId || null;
    } catch {
      return null;
    }
  };

  // Search using alias map - returns up to 40 suggestions
  const getSearchResults = (searchText) => {
    const normalizedSearch = normalize(searchText);
    if (!normalizedSearch) return [];
    const tokens = normalizedSearch.split(" ");
    const expanded = tokens.flatMap(getAliasesForToken);
    return allSkills
      .filter((s) => {
        const cat = normalize(s.category || "");
        const sub = normalize(s.subcategory || "");
        const name = normalize(s.name || "");
        return expanded.some((t) => cat.includes(t) || sub.includes(t) || name.includes(t));
      })
      .slice(0, 40);
  };

  // helper: find skill object by name
  const getSkillByName = (name) => allSkills.find((s) => s.name === name || normalize(s.name) === normalize(name));

  // Fetch all skills (public) on mount
  useEffect(() => {
    const load = async () => {
      setLoadingSkills(true);
      try {
        const res = await api.get("skills/");
        setAllSkills(res.data || []);
      } catch (err) {
        setSkillsError(err?.message || "Failed to load skills");
      } finally {
        setLoadingSkills(false);
      }
    };
    load();

    // set current user id from token (if present)
    setCurrentUserId(getUserIdFromToken());
  }, []);

  // After all skills are loaded, if user logged in, fetch user's saved UserSkills and matches
  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (!token) return;

    const fetchUserData = async () => {
      try {
        // fetch user-skills
        const res = await api.get("user-skills/");
        const rows = res.data || [];

        // map rows into normalized array {id, skillId, skillName, type}
        const mapped = rows.map((r) => {
          // support both numeric skill (pk) or nested object
          let skillId = null;
          let skillName = "";
          if (r.skill && typeof r.skill === "object") {
            skillId = r.skill.id;
            skillName = r.skill.name;
          } else {
            skillId = r.skill;
            const s = (allSkills || []).find((x) => x.id === skillId);
            skillName = s ? s.name : String(skillId);
          }
          return { id: r.id, skillId, skillName, type: r.type };
        });

        setUserSkills(mapped);
        setSkillsToLearn(mapped.filter((m) => m.type === "learn").map((m) => m.skillName));
        setSkillsToTeach(mapped.filter((m) => m.type === "teach").map((m) => m.skillName));

        // fetch matches using getMatches (auth.js)
        const matchesData = await getMatches();
        setMatches(matchesData || []);
      } catch (err) {
        // If unauthorized, do nothing (user not logged in)
        console.warn("Could not fetch user data:", err?.response?.data || err.message);
      }
    };

    fetchUserData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [allSkills]); // re-run when allSkills available so skill names can be resolved

  // Categories & subcategories helpers (derived from allSkills)
  const categories = [...new Set(allSkills.map((s) => s.category).filter(Boolean))].sort();
  const subcategoriesLearn = categoryFilterLearn
    ? [...new Set(allSkills.filter((s) => s.category === categoryFilterLearn).map((s) => s.subcategory).filter(Boolean))].sort()
    : [];
  const subcategoriesTeach = categoryFilterTeach
    ? [...new Set(allSkills.filter((s) => s.category === categoryFilterTeach).map((s) => s.subcategory).filter(Boolean))].sort()
    : [];

  // Filter lists for multi-select (not directly used now but useful)
  const getFilteredSkillsLearn = () =>
    allSkills
      .filter((s) => (categoryFilterLearn ? s.category === categoryFilterLearn : true))
      .filter((s) => (subcategoryFilterLearn ? s.subcategory === subcategoryFilterLearn : true))
      .sort((a, b) => a.name.localeCompare(b.name));

  const getFilteredSkillsTeach = () =>
    allSkills
      .filter((s) => (categoryFilterTeach ? s.category === categoryFilterTeach : true))
      .filter((s) => (subcategoryFilterTeach ? s.subcategory === subcategoryFilterTeach : true))
      .sort((a, b) => a.name.localeCompare(b.name));

  // Add selected skills (persist to backend). Uses addUserSkill (from src/auth.js)
  const addSelectedLearn = async () => {
    const token = localStorage.getItem("access_token");
    if (!token) return alert("Please log in to save skills.");

    for (const skillName of tempSelectedLearn) {
      const skillObj = getSkillByName(skillName);
      if (!skillObj) continue;
      try {
        const created = await addUserSkill(skillObj.id, "learn"); // should return created object
        const createdSkillId = created?.skill?.id ?? created?.skill ?? skillObj.id;
        const createdObj = {
          id: created?.id ?? null,
          skillId: createdSkillId,
          skillName: skillObj.name,
          type: "learn",
        };
        setUserSkills((prev) => {
          if (prev.some((u) => u.skillId === createdObj.skillId && u.type === "learn")) return prev;
          return [...prev, createdObj];
        });
        setSkillsToLearn((prev) => (!prev.includes(skillObj.name) ? [...prev, skillObj.name] : prev));
      } catch (err) {
        console.error("Add learn failed:", err?.response?.data || err.message);
      }
    }
    setTempSelectedLearn([]);
    // refresh matches
    try {
      const m = await getMatches();
      setMatches(m || []);
    } catch {}
  };

  const addSelectedTeach = async () => {
    const token = localStorage.getItem("access_token");
    if (!token) return alert("Please log in to save skills.");

    for (const skillName of tempSelectedTeach) {
      const skillObj = getSkillByName(skillName);
      if (!skillObj) continue;
      try {
        const created = await addUserSkill(skillObj.id, "teach");
        const createdSkillId = created?.skill?.id ?? created?.skill ?? skillObj.id;
        const createdObj = {
          id: created?.id ?? null,
          skillId: createdSkillId,
          skillName: skillObj.name,
          type: "teach",
        };
        setUserSkills((prev) => {
          if (prev.some((u) => u.skillId === createdObj.skillId && u.type === "teach")) return prev;
          return [...prev, createdObj];
        });
        setSkillsToTeach((prev) => (!prev.includes(skillObj.name) ? [...prev, skillObj.name] : prev));
      } catch (err) {
        console.error("Add teach failed:", err?.response?.data || err.message);
      }
    }
    setTempSelectedTeach([]);
    // refresh matches
    try {
      const m = await getMatches();
      setMatches(m || []);
    } catch {}
  };

  // Add from search (the search results show skill name)
  const addSkillFromSearchLearn = async (skillName) => {
    setSearchLearn("");
    const skillObj = getSkillByName(skillName);
    if (!skillObj) return;
    await addSelectedLearnInternal(skillObj, "learn");
  };
  const addSkillFromSearchTeach = async (skillName) => {
    setSearchTeach("");
    const skillObj = getSkillByName(skillName);
    if (!skillObj) return;
    await addSelectedTeachInternal(skillObj, "teach");
  };

  // internal helpers used by addSkillFromSearch to avoid double-looping
  const addSelectedLearnInternal = async (skillObj, type) => {
    const token = localStorage.getItem("access_token");
    if (!token) return alert("Please log in to save skills.");
    try {
      const created = await addUserSkill(skillObj.id, "learn");
      const createdSkillId = created?.skill?.id ?? created?.skill ?? skillObj.id;
      const createdObj = { id: created?.id ?? null, skillId: createdSkillId, skillName: skillObj.name, type: "learn" };
      setUserSkills((prev) => {
        if (prev.some((u) => u.skillId === createdObj.skillId && u.type === "learn")) return prev;
        return [...prev, createdObj];
      });
      setSkillsToLearn((prev) => (!prev.includes(skillObj.name) ? [...prev, skillObj.name] : prev));
      const m = await getMatches();
      setMatches(m || []);
    } catch (err) {
      console.error(err);
    }
  };

  const addSelectedTeachInternal = async (skillObj, type) => {
    const token = localStorage.getItem("access_token");
    if (!token) return alert("Please log in to save skills.");
    try {
      const created = await addUserSkill(skillObj.id, "teach");
      const createdSkillId = created?.skill?.id ?? created?.skill ?? skillObj.id;
      const createdObj = { id: created?.id ?? null, skillId: createdSkillId, skillName: skillObj.name, type: "teach" };
      setUserSkills((prev) => {
        if (prev.some((u) => u.skillId === createdObj.skillId && u.type === "teach")) return prev;
        return [...prev, createdObj];
      });
      setSkillsToTeach((prev) => (!prev.includes(skillObj.name) ? [...prev, skillObj.name] : prev));
      const m = await getMatches();
      setMatches(m || []);
    } catch (err) {
      console.error(err);
    }
  };

  // Remove skill -> delete UserSkill row in backend (if present) and update local state
  const removeSkillLearn = async (skillName) => {
    const skillObj = getSkillByName(skillName);
    if (!skillObj) {
      setSkillsToLearn((prev) => prev.filter((s) => s !== skillName));
      return;
    }
    // find userSkill entry
    const us = userSkills.find((u) => u.skillId === skillObj.id && u.type === "learn");
    if (!us) {
      setSkillsToLearn((prev) => prev.filter((s) => s !== skillName));
      return;
    }
    try {
      await api.delete(`user-skills/${us.id}/`);
      setUserSkills((prev) => prev.filter((x) => x.id !== us.id));
      setSkillsToLearn((prev) => prev.filter((s) => s !== skillName));
      const m = await getMatches();
      setMatches(m || []);
    } catch (err) {
      console.error("Failed to delete user-skill:", err?.response?.data || err.message);
      // optimistic local removal anyway
      setSkillsToLearn((prev) => prev.filter((s) => s !== skillName));
    }
  };

  const removeSkillTeach = async (skillName) => {
    const skillObj = getSkillByName(skillName);
    if (!skillObj) {
      setSkillsToTeach((prev) => prev.filter((s) => s !== skillName));
      return;
    }
    const us = userSkills.find((u) => u.skillId === skillObj.id && u.type === "teach");
    if (!us) {
      setSkillsToTeach((prev) => prev.filter((s) => s !== skillName));
      return;
    }
    try {
      await api.delete(`user-skills/${us.id}/`);
      setUserSkills((prev) => prev.filter((x) => x.id !== us.id));
      setSkillsToTeach((prev) => prev.filter((s) => s !== skillName));
      const m = await getMatches();
      setMatches(m || []);
    } catch (err) {
      console.error("Failed to delete user-skill:", err?.response?.data || err.message);
      setSkillsToTeach((prev) => prev.filter((s) => s !== skillName));
    }
  };

  // findMatches (calls API, sets matches)
  const handleFindMatches = async () => {
    if (skillsToLearn.length === 0 || skillsToTeach.length === 0) {
      alert("Please add at least one skill to learn and teach!");
      return;
    }
    try {
      const data = await getMatches();
      setMatches(data || []);
    } catch (err) {
      console.error("Failed to fetch matches:", err);
      alert("Error fetching matches. Make sure you're logged in and try again.");
    }
  };

  // Format matches for display: pick partner and role
  const renderMatchCard = (match) => {
    // match has nested learner, teacher, skill per your serializer
    const learner = match.learner;
    const teacher = match.teacher;
    const skill = match.skill;
    const isMutual = !!match.is_mutual;

    // choose partner relative to current user
    const userId = Number(currentUserId);
    let partner = null;
    let partnerRole = "";
    if (userId && learner && teacher) {
      if (Number(learner.id) === Number(userId)) {
        partner = teacher;
        partnerRole = "Teacher";
      } else if (Number(teacher.id) === Number(userId)) {
        partner = learner;
        partnerRole = "Learner";
      } else {
        // fallback, show teacher as partner
        partner = teacher;
        partnerRole = "Teacher";
      }
    } else {
      // not logged in or missing ids: show teacher -> learner info
      partner = teacher;
      partnerRole = "Teacher";
    }

    return (
      <li
        key={match.id}
        className="bg-purple-800 bg-opacity-70 rounded-xl p-4 shadow-md hover:bg-purple-700 transition"
      >
        <p className="mb-1">
          <strong>{partner?.username ?? "Unknown"}</strong> â€” <span className="font-medium">{partnerRole}</span>
        </p>
        <p className="text-sm">Skill: <em>{skill?.name ?? "Unknown skill"}</em></p>
        <p className="text-xs mt-2">{isMutual ? "Mutual match" : "One-way match (only one side matches right now)"}</p>
      </li>
    );
  };

  // Derived search result arrays
  const searchResultsLearn = getSearchResults(searchLearn);
  const searchResultsTeach = getSearchResults(searchTeach);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-700 text-white flex flex-col items-center p-8">
      <header className="mb-12 text-center max-w-3xl">
        <h1 className="text-5xl font-extrabold mb-4 drop-shadow-lg">SkillSwap</h1>
        <p className="text-lg font-light drop-shadow-md">
          Connect, teach, and learn new skills by matching with people like you.
        </p>
      </header>

      <main className="w-full max-w-xl bg-white bg-opacity-10 rounded-3xl p-8 shadow-xl backdrop-blur-md overflow-auto">
        {loadingSkills ? (
          <p className="text-center text-purple-200">Loading skills...</p>
        ) : skillsError ? (
          <p className="text-center text-red-300">Error loading skills: {skillsError}</p>
        ) : (
          <>
            {/* Learn Section */}
            <SkillSelector
              title="Skills You Want to Learn"
              skills={allSkills}
              category={categoryFilterLearn}
              subcategory={subcategoryFilterLearn}
              onCategoryChange={(v) => { setCategoryFilterLearn(v); setSubcategoryFilterLearn(""); setTempSelectedLearn([]); }}
              onSubcategoryChange={(v) => { setSubcategoryFilterLearn(v); setTempSelectedLearn([]); }}
              subcategories={subcategoriesLearn}
              tempSelected={tempSelectedLearn}
              setTempSelected={setTempSelectedLearn}
              addSelected={addSelectedLearn}
              searchValue={searchLearn}
              setSearchValue={setSearchLearn}
              searchResults={searchResultsLearn}
              addFromSearch={addSkillFromSearchLearn}
              selectedSkills={skillsToLearn}
              removeSelectedSkill={removeSkillLearn}
            />

            {/* Teach Section */}
            <SkillSelector
              title="Skills You Can Teach"
              skills={allSkills}
              category={categoryFilterTeach}
              subcategory={subcategoryFilterTeach}
              onCategoryChange={(v) => { setCategoryFilterTeach(v); setSubcategoryFilterTeach(""); setTempSelectedTeach([]); }}
              onSubcategoryChange={(v) => { setSubcategoryFilterTeach(v); setTempSelectedTeach([]); }}
              subcategories={subcategoriesTeach}
              tempSelected={tempSelectedTeach}
              setTempSelected={setTempSelectedTeach}
              addSelected={addSelectedTeach}
              searchValue={searchTeach}
              setSearchValue={setSearchTeach}
              searchResults={searchResultsTeach}
              addFromSearch={addSkillFromSearchTeach}
              selectedSkills={skillsToTeach}
              removeSelectedSkill={removeSkillTeach}
            />

            {/* Find Matches Button */}
            <button
              onClick={handleFindMatches}
              className="w-full py-3 bg-purple-600 rounded-full font-semibold hover:bg-purple-700 transition mt-6"
            >
              Find Matches
            </button>

            {/* Matches list */}
            <section className="mt-8">
              {matches && matches.length > 0 ? (
                <>
                  <h2 className="text-xl font-semibold mb-4">Your Matches</h2>
                  <ul className="space-y-4">
                    {matches.map((m) => renderMatchCard(m))}
                  </ul>
                </>
              ) : (
                <p className="italic text-purple-300 mt-6">No matches yet â€” add skills and click "Find Matches".</p>
              )}
            </section>
          </>
        )}
      </main>

      <footer className="mt-auto text-purple-300 text-sm mt-12 mb-6">
        Â© 2025 SkillSwap â€” Made with ðŸ’œ
      </footer>
    </div>
  );
}

export default App;
****VERSION 6*****